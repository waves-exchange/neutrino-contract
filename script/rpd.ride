{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#
# Smart Contract Implementing Staking and Reward Withdrawal by Users of Neutrino Protocol
# (RPD is Reward Payouts Distribution)
#
let revisionNum = ""

let SEP = "__"

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    getInteger(this, key).valueOrElse(0)
}
func getStringByKey(key: String) = {
    getString(this, key).valueOrElse("")
}
func getBoolByKey(key: String) = {
    getBoolean(this, key).valueOrElse(false)
}
func getNumberByAddressAndKey(address: String, key: String) = {
    getInteger(addressFromStringValue(address), key).valueOrElse(0)
}
func getStringByAddressAndKey(address: Address, key: String) = {
     getString(address, key).valueOrElse("")
}

# data indices from controlConfig
let IdxControlCfgNeutrinoDapp     = 1
let IdxControlCfgAuctionDapp      = 2
let IdxControlCfgRpdDapp          = 3
let IdxControlCfgMathDapp         = 4
let IdxControlCfgLiquidationDapp  = 5
let IdxControlCfgRestDapp         = 6
let IdxControlCfgNodeRegistryDapp = 7
let IdxControlCfgNsbtStakingDapp  = 8
let IdxControlCfgMediatorDapp     = 9

func getStringOrFail(address: Address, key: String) = address.getString(key).valueOrErrorMessage("mandatory " + address.toString() + "." + key + " is not defined")

func keyControlAddress() = "%s%s__config__controlAddress"
func keyControlCfg()     = "%s__controlConfig"

func readControlCfgOrFail(control: Address) = control.getStringOrFail(keyControlCfg()).split(SEP)
func getContractAddressOrFail(controlCfg: List[String], idx: Int) = controlCfg[idx].addressFromString()
  .valueOrErrorMessage("Control cfg doesn't contain address at index " + idx.toString())

# GLOBAL VARIABLES
let controlContract = this.getString(keyControlAddress()).valueOrElse("3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP").addressFromStringValue()
let controlCfg = controlContract.readControlCfgOrFail()
let neutrinoContract = controlCfg.getContractAddressOrFail(IdxControlCfgNeutrinoDapp)

#-------------------Constructor-------------------------
let NeutrinoAssetIdKey = "neutrino_asset_id"
let NeutrinoContractKey = "neutrino_contract"

#-------------------Keys---------------------------------
let BalanceKey = "rpd_balance"
let ControlContractKey = "control_contract"
let NsbtAssetIdKey = "bond_asset_id"
let AdminsKey = "admins"

#-------------------Constants---------------------------------
let USDNTYPE = "USDN"
let NSBTTYPE = "NSBT"

func getUserBalanceKey(owner: String, assetId: String) = makeString([BalanceKey, assetId, owner], "_")
func getContractBalanceKey(assetId: String) = BalanceKey + "_" + assetId

func getExpireProposalKey(hash: String) = "proposal_expire" + "_" + hash
func getOwnerProposalKey(hash: String) = "proposal_owner" + "_" + hash
func getArgumentsProposalKey(hash: String) = "proposal_arguments" + "_" + hash
func getVoteKey(owner: String, hash: String) = "proposal_vote" + "_" + owner + "_" + hash

#-------------------Convert functions-------------------
func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Global vars-------------------------
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoAssetIdKey))
let nsbtAssetIdStr = getStringByAddressAndKey(neutrinoContract, NsbtAssetIdKey)
let nsbtAssetId = nsbtAssetIdStr.fromBase58String()

#-------------------Get functions----------------------
func getContractBalance(assetId: String) = getNumberByKey(getContractBalanceKey(assetId))
func getUserBalance(owner : String, assetId: String) = getNumberByKey(getUserBalanceKey(owner, assetId))

#----split protocol-------------------------------
func getRewardsConfigKey(owner : String, share: Int, receiver: String) = {
    makeString(["stakingconfig", owner, toString(share), receiver], "_")
}
func getCurrentRewardsConfigKey(owner : String) = {
    "stakingconfig_current_" + owner
}
func getRewardsConfigStartKey(configKey : String, isStart: Boolean) = {
    configKey + (if isStart then "_start" else "_end")
}

func getRewardConfigInitialShare(owner : String) = {
    owner + "_initialShare"
}

func getValidStakingAssetOrFail(stakingType: String, assetId: ByteVector) = {
  if (stakingType == USDNTYPE && assetId != neutrinoAssetId) then throw("can use USDN only") else
  if (stakingType == NSBTTYPE && assetId != nsbtAssetId) then throw("can use NSBT only") else
  if (stakingType != USDNTYPE && stakingType != NSBTTYPE) then throw("unsupported staking type " + stakingType) else
  assetId
}

func internalLockNeutrino(stakingType: String, i: Invocation, receiver: String, share: Int) = {
    let pmt = i.payments[0].value()
    let assetId = getValidStakingAssetOrFail(stakingType, pmt.assetId.value())

    if (!isDefined(addressFromString(receiver)))
        then throw("Invalid address format " + receiver)
    else if (share > 100)
        then throw("staking rewards share cannot be higher than 100%")
    else if (share < 1)
        then throw("staking rewards share cannot be lower than 1%")
    else {
        let account = toString(i.caller)
        let assetIdString = toBase58String(assetId)
        let currentConfig = getStringByKey(getCurrentRewardsConfigKey(account))

        let correctData = if (currentConfig != "") then {
            # staking has been submitted before - need to do additional validations
            let currentConfigData = currentConfig.split("_")
            let currShare = currentConfigData[2].parseIntValue()
            let currReceiver = currentConfigData[3]
            # can be zero because of old records
            let notMigratedInitialShare = getNumberByKey(getRewardConfigInitialShare(account))
            let actualInitialShare = if (notMigratedInitialShare == 0) then currShare else notMigratedInitialShare

            #if (currReceiver != receiver) then throw("Impossible to setup new referral address for existed staking") else
            #if (share < actualInitialShare) then throw("Impossible to setup new share less then initial share for existed staking") else
            let newShare = if (share < actualInitialShare || currReceiver != receiver) then actualInitialShare else share
            [actualInitialShare.toString(), newShare.toString(), currReceiver]
        } else {
            [share.toString(), share.toString(), receiver]
        }
        let correctInitialShare = correctData[0].parseIntValue()
        let correctShare = correctData[1].parseIntValue()
        let correctReceiver = correctData[2]

        let newCurrentConfig = getRewardsConfigKey(account, correctShare, correctReceiver)
        let isNewConfig = !(currentConfig == newCurrentConfig)
        let end = if isNewConfig then height else 0
        let start = if isNewConfig then height else getNumberByKey(getRewardsConfigStartKey(newCurrentConfig, true))

        ([IntegerEntry(getContractBalanceKey(assetIdString), getContractBalance(assetIdString) + pmt.amount),
        IntegerEntry(getUserBalanceKey(account, assetIdString), getUserBalance(account, assetIdString) + pmt.amount),
        IntegerEntry(getRewardsConfigStartKey(currentConfig, false), end), #if there is no current config it leads to dead state key
        IntegerEntry(getRewardsConfigStartKey(newCurrentConfig, true), start),
        IntegerEntry(getRewardConfigInitialShare(account), correctInitialShare),
        StringEntry(getCurrentRewardsConfigKey(account), newCurrentConfig)], unit)
    }
}

func internalUnlock(stakingType: String, i: Invocation, unlockAmount: Int, assetIdParam: String) = {
  let account = toString(i.caller)
  let assetId = getValidStakingAssetOrFail(stakingType, assetIdParam.fromBase58String())
  let assetIdString = assetId.toBase58String()

  let balance = getUserBalance(account, assetIdString) - unlockAmount
  if (balance < 0) then throw("invalid amount") else

  ([IntegerEntry(getContractBalanceKey(assetIdString), getContractBalance(assetIdString) - unlockAmount),
  IntegerEntry(getUserBalanceKey(account, assetIdString), balance),
  ScriptTransfer(addressFromStringValue(account), unlockAmount, assetId)], unit)
}

#-------------------Callable----------------------
# start neutrino staking
# [called by user]
@Callable(i)
func lockNeutrinoSP(receiver: String, share: Int) = {
    internalLockNeutrino(USDNTYPE, i, receiver, share)
}

@Callable(i)
func lockNeutrino() = {
    internalLockNeutrino(USDNTYPE, i, toString(i.caller), 100)
}

@Callable(i)
func lockNsbtSP(receiver: String, share: Int) = {
    internalLockNeutrino(NSBTTYPE, i, receiver, share)
}

@Callable(i)
func lockNsbt() = {
    internalLockNeutrino(NSBTTYPE, i, toString(i.caller), 100)
}

# cancel neutrino staking
# [called by user]
@Callable(i)
func unlockNeutrino(unlockAmount: Int, assetIdString: String) = {
    internalUnlock(USDNTYPE, i, unlockAmount, assetIdString)
}

# cancel nsbt staking
# [called by user]
@Callable(i)
func unlockNsbt(unlockAmount: Int, assetIdString: String) = {
    internalUnlock(NSBTTYPE, i, unlockAmount, assetIdString)
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsListStr = makeString([
        "GJdLSaLiv5K7xuejac8mcRcHoyo3dPrESrvktG3a6MAR",
        "EYwZmURd5KKaQRBjsVa6g8DPisFoS6SovRJtFiL5gMHU",
        "DtmAfuDdCrHK8spdAeAYzq6MsZegeD9gnsrpuTRkCbVA",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ], SEP)

    let pubKeyAdminsList = controlContract.getString("%s__multisig")
          .valueOrElse(pubKeyAdminsListStr)
          .split(SEP)

    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
