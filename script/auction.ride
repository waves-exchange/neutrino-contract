{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing NSBT Auction in the Orderbook of Neutrino Protocol
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    getInteger(this, key).valueOrElse(0)
}

func getStringByKey(key: String) = {
    getString(this, key).valueOrElse("")
}

func getBoolByAddressAndKey(address: Address, key: String) = {
     getBoolean(address, key).valueOrElse(false)
}

func getStringByAddressAndKey(address: Address, key: String) = {
   getString(address, key).valueOrElse("")
}

func getNumberByAddressAndKey(address: Address, key: String) = {
    getInteger(address, key).valueOrElse(0)
}

func asAnyList(val: Any) = {
  match val {
    case valAnyLyst: List[Any] => valAnyLyst
    case _ => throw("fail to cast into List[Any]")
  }
}
func asString(val: Any) = {
  match val {
    case valStr: String => valStr
    case _ => throw("fail to cast into String")
  }
}
func asInt(val: Any) = {
  match val {
    case valInt: Int => valInt
    case _ => throw("fail to cast into Int")
  }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let BIGPAULI = 1000000.toBigInt()
let PRICELET = 1000000 # 10^6
let MULT = 100000000 #10^8
let BIGMULT16 = 10000000000000000.toBigInt() #10^16
let SCALE8 = 8
let SCALE16 = 16

let MINORDERTOTAL = 10*WAVELET
let MAXROI = 95
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------

#-------------------Keys--------------------------------
let PriceKey = "price"
let NsbtAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"
let MathContractKey = "math_contract"
let MinWavesForNsbtBuyKey = "min_waves_nsbt_buy"
let MinNsbtSellKey = "min_nsbt_sell"

func getRoiByOrderIdKey(orderId: String) = "debug_order_roi_" + orderId

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId
#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, PRICELET, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, PRICELET), PAULI, WAVELET)

func convertWavesToBond(amount: Int, price: Int) = convertWavesToNeutrino(amount, price)
func convertBondToWaves(amount: Int, price: Int) = convertNeutrinoToWaves(amount, price)

func toX16(origVal: Int, origScaleMult: Int)          = fraction(origVal.toBigInt(), BIGMULT16, origScaleMult.toBigInt())
func fromX16(val: BigInt, resultScaleMult: Int)       = fraction(val, resultScaleMult.toBigInt(), BIGMULT16).toInt()

#-------------------Global vars-------------------------
let neutrinoContract = Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo')
let controlContract = Address(base58'3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP') ## The value from neutrino.ride
let liquidationContract = Address(base58'3P4PCxsJqMzQBALo8zANHtBDZRRquobHQp7')
let mathContract = addressFromStringValue(getStringByKey(MathContractKey))
let neutrinoAssetId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p' # Assets ids. The value from neutrino.ride
let nsbtAssetId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g' # NSBT with 6 decimals as USDN does

let isBlocked = getBoolByAddressAndKey(controlContract, "is_blocked")
let minWavesAmountNsbtBuy = this.getInteger(MinWavesForNsbtBuyKey).valueOrElse(1000000000)
let minNsbtSell = this.getInteger(MinNsbtSellKey).valueOrElse(1000000)

#-------------------Global vars deficit, locked & supply -------------------------
let firstOrder = getStringByKey(FirstOrderKey)

#-------------------Get functions----------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))
func getReversePrice(price: Int) = {PRICELET * PRICELET / price}

func calcNsbt2WavesPriceRaw(spentWavesRaw: Int, receivedNsbtRaw: Int) = {fraction(spentWavesRaw, PAULI * PRICELET, receivedNsbtRaw)}

#-------------------Any functions----------------------
func orderData(orderId: String, totalWavelets: Int, filledWavelets: Int, owner: String, status: String, roi: Int, price: Int, currentPrice: Int) = {
    [IntegerEntry(getOrderPriceKey(orderId), price), # currently it is kept for backwards compatibility with cache-updater: see https://github.com/waves-exchange/cache-updater/blob/master/src/entities/bondsorder.go#L143
     IntegerEntry(getOrderTotalKey(orderId), totalWavelets),
     IntegerEntry(getOrderFilledTotalKey(orderId), filledWavelets),
     StringEntry(getOrderOwnerKey(orderId), owner),
     IntegerEntry(getOrderHeightKey(orderId), height),
     StringEntry(getOrderStatusKey(orderId), status),
     IntegerEntry("debug_order_currentPrice_" + orderId, currentPrice),
     IntegerEntry(getRoiByOrderIdKey(orderId), roi)
    ]
}

func toStr(name: String, curveResult: List[Any]) = {
    name + "[nsbtAmountRaw="    + curveResult[0].asInt().toString()
        + " usdnPayment="       + curveResult[1].asInt().toString()
        + " wRaw="              + curveResult[2].asInt().toString()
        + " uRaw="              + curveResult[3].asInt().toString()
        + " mRaw="              + curveResult[4].asInt().toString()
        + " sRaw="              + curveResult[5].asInt().toString()
        + " nsbtCurveParam_a="  + curveResult[6].asInt().toString()
        + " nsbtCurveParam_b="  + curveResult[7].asInt().toString()
        + " wReservesInUsdn="   + curveResult[8].asInt().toString()
        + " price="             + curveResult[9].asInt().toString()
        + " multBR="            + curveResult[10].asInt().toString()
        + " multPower="         + curveResult[11].asInt().toString()
        + " multExpInPower="    + curveResult[12].asString()
        + " multK="             + curveResult[13].asString()
        + " step1="             + curveResult[14].asString()
        + " step2="             + curveResult[15].asString()
        + " step3="             + curveResult[16].asInt().toString()
        + "]"
}

#-------------------Callable---------------------------

@Callable(i)
func buyNsbt() = {
    let pmt = i.payments[0].value()
    let pmtAmount = pmt.amount
    let wavesPay = pmtAmount

    if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles") else
    if (isDefined(pmt.assetId)) then throw("can use waves only") else
    if (pmtAmount < minWavesAmountNsbtBuy) then throw("min "+ minWavesAmountNsbtBuy.toString() + " waves expected") else
    let ownerAddress = i.caller
    # ([], (currentPrice, neutrinoLockedBalance, wavesLockedBalance, reserve, reservesInUsdn, neutrinoSupply, surplus, surplusPercent, BR, nsbtSupply))
    strict neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsMATH", [], []).asAnyList()
    let currentPrice           = neutrinoMetrics[0].asInt()
    let reserve                = neutrinoMetrics[3].asInt()
    let neutrinoSupply         = neutrinoMetrics[5].asInt()
    let nsbtSupply             = neutrinoMetrics[9].asInt()
    let nsbtSupplyMAX =  assetInfo(nsbtAssetId).value().quantity
    strict curveResult = mathContract.invoke("curveFunctionMATH", [reserve, neutrinoSupply, currentPrice, nsbtSupplyMAX, nsbtSupply, wavesPay], []).asAnyList()
    
    let nsbtAmount = curveResult[0].asInt()

    if (nsbtAmount <= 0) then throw("nsbtAmount <= 0") else
    if (nsbtAmount * 9223372 < wavesPay) then throw("Nsbt2Waves price exceeds MAX_INT: " + toString(wavesPay) + "/" + toString(nsbtAmount)) else {
        let nsbt2WavesPriceRaw = calcNsbt2WavesPriceRaw(wavesPay, nsbtAmount)
        let roi = 0

        # replacement of ScriptTransfer(neutrinoContract, wavesPay, unit)
        # now Neutrino callable acceptWaves() receives waves and puts them to leasing immediately
        strict amountLeased = invoke(neutrinoContract, "acceptWaves", nil, i.payments)

        (orderData(i.transactionId.toBase58String(), pmtAmount, pmtAmount, ownerAddress.toString(), FILLED,
            roi,                # to keep backward compatability with prev. format
            nsbt2WavesPriceRaw, 
            currentPrice) # to keep backward compatability with prev. format
        ++ [
          ScriptTransfer(ownerAddress, nsbtAmount, nsbtAssetId),
          StringEntry("debug_curveResult", toStr("curveResult", curveResult))
        ],
        nsbtAmount)
    }
}

# sell NSBT for USDN by price 1
@Callable(i)
func sellNsbt() = {
  if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles") else
  let pmt = i.payments[0].value()
  let pmtAmount = pmt.amount

  if (pmt.assetId != nsbtAssetId) then throw("can use NSBT only") else
  if (pmtAmount < minNsbtSell) then throw("min "+ minNsbtSell.toString() + " nsbt expected") else
  strict neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsMATH", [], []).asAnyList()
  let nsbtSupply = neutrinoMetrics[10].asInt()

  strict newPrice = mathContract.invoke("calcContractNsbtPriceBySupplyMATH", [nsbtSupply - pmtAmount], []).asAnyList()[0].asInt()
  if (newPrice < PAULI) then throw("resulting nsbt price would be < 1 (" + newPrice.toString() + " usdn") else
  strict transf = neutrinoContract.invoke("transferUsdnToUser", [pmtAmount, i.caller.toString()], [])
  (
    [],
    newPrice
  )
}

# cancel buy NSBT order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    let caller = toString(i.caller)

    let nextOrder = getNextOrder(orderId)
    let prevOrder = getPrevOrder(orderId)

    if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {[
        StringEntry(FirstOrderKey, if firstOrder == orderId then nextOrder else firstOrder),

        StringEntry(getNextOrderKey(prevOrder), nextOrder),
        StringEntry(getPrevOrderKey(nextOrder), prevOrder),
        StringEntry(getOrderStatusKey(orderId), CANCELED),
        ScriptTransfer(i.caller, amount, unit)]
    }
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "GJdLSaLiv5K7xuejac8mcRcHoyo3dPrESrvktG3a6MAR",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
