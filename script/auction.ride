{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing NSBT Auction in the Orderbook of Neutrino Protocol
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    getInteger(this, key).valueOrElse(0)
}

func getStringByKey(key: String) = {
    getString(this, key).valueOrElse("")
}

func getBoolByAddressAndKey(address: Address, key: String) = {
     getBoolean(address, key).valueOrElse(false)
}

func getStringByAddressAndKey(address: Address, key: String) = {
   getString(address, key).valueOrElse("")
}

func getNumberByAddressAndKey(address: Address, key: String) = {
    getInteger(address, key).valueOrElse(0)
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let BIGPAULI = 1000000.toBigInt()
let PRICELET = 1000000 # 10^6
let MULT = 100000000 #10^8
let BIGMULT16 = 10000000000000000.toBigInt() #10^16
let SCALE8 = 8
let SCALE16 = 16

let MINORDERTOTAL = 10*WAVELET
let MAXROI = 95
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------

#-------------------Keys--------------------------------
let PriceKey = "price"
let NsbtAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"

func getRoiByOrderIdKey(orderId: String) = "debug_order_roi_" + orderId

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId
#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, PRICELET, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, PRICELET), PAULI, WAVELET)

func convertWavesToBond(amount: Int, price: Int) = convertWavesToNeutrino(amount, price)
func convertBondToWaves(amount: Int, price: Int) = convertNeutrinoToWaves(amount, price)

#-------------------Global vars-------------------------
let neutrinoContract = Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo')
let controlContract = Address(base58'3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP') ## The value from neutrino.ride
let liquidationContract = Address(base58'3P4PCxsJqMzQBALo8zANHtBDZRRquobHQp7')
let neutrinoAssetId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p' # Assets ids. The value from neutrino.ride
let nsbtAssetId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g' # NSBT with 6 decimals as USDN does

let isBlocked = getBoolByAddressAndKey(controlContract, "is_blocked")

#-------------------Global vars deficit, locked & supply -------------------------
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride
let neutrinoLockedBalance = getNumberByAddressAndKey(neutrinoContract, NeutrinoLockedBalanceKey) #locked balance from USDN -> WAVES swap
#cannot be expressed by complexity limitations: let wavesLockedBalance = getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey) #locked balance from WAVES -> USDN swap
let reserve = wavesBalance(neutrinoContract).regular -
    getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey) #waves reserves to cover USDN supply
let reservesInUsdn = convertWavesToNeutrino(reserve, currentPrice)
let neutrinoSupply = neutrinoLockedBalance + assetInfo(neutrinoAssetId).value().quantity - assetBalance(neutrinoContract, neutrinoAssetId) - assetBalance(liquidationContract, neutrinoAssetId) # supply outside main sc or liquidation contract
let deficit = neutrinoSupply - reservesInUsdn
let currentMaxRoi = fraction(deficit, 100, neutrinoSupply)

let currentBrMult = fraction(reservesInUsdn, MULT, neutrinoSupply)
let firstOrder = getStringByKey(FirstOrderKey)

# NSBT data
let nsbtSupplyMAX =  assetInfo(nsbtAssetId).value().quantity
let nsbtSupply = nsbtSupplyMAX - this.assetBalance(nsbtAssetId)


#-------------------Get functions----------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))

func getPriceForRoi(roiPercents: Int) = {fraction(100 + roiPercents, currentPrice, 100)}
func getReversePrice(price: Int) = {PRICELET * PRICELET / price}

func calcNsbt2WavesPriceRaw(spentWavesRaw: Int, receivedNsbtRaw: Int) = {fraction(spentWavesRaw, PAULI * PRICELET, receivedNsbtRaw)}

#------------------- -------------
#-------------------Any functions----------------------

func orderData(orderId: String, totalWavelets: Int, filledWavelets: Int, owner: String, status: String, roi: Int, price: Int) = {
    [IntegerEntry(getOrderPriceKey(orderId), price), # currently it is kept for backwards compatibility with cache-updater: see https://github.com/waves-exchange/cache-updater/blob/master/src/entities/bondsorder.go#L143
     IntegerEntry(getOrderTotalKey(orderId), totalWavelets),
     IntegerEntry(getOrderFilledTotalKey(orderId), filledWavelets),
     StringEntry(getOrderOwnerKey(orderId), owner),
     IntegerEntry(getOrderHeightKey(orderId), height),
     StringEntry(getOrderStatusKey(orderId), status),
     IntegerEntry("debug_order_currentPrice_" + orderId, currentPrice),
     IntegerEntry(getRoiByOrderIdKey(orderId), roi)
    ]
}

# explicit parameters were introduced to simplify testing
func calculateK(wRaw: Int, uRaw: Int, price: Int, mRaw: Int, sRaw: Int) = {
  let EXP = 2718281.toBigInt()
  let EXPSCALE = 6

  let a = this.getInteger("nsbtCurveParam_a").valueOrElse(3)
  let paulB = this.getInteger("nsbtCurveParam_b").valueOrElse((3*PAULI)/10)

  let wReservesInUsdn = convertWavesToNeutrino(wRaw, price)
  let multBR = fraction(wReservesInUsdn, MULT, uRaw)
  if (multBR > 10678564816) then throw("BR > 10678.564816% will overflow exponent") else

  let multPower = a * (multBR - MULT)
  let multExpInPower = pow(EXP, EXPSCALE, toBigInt(multPower), SCALE8, SCALE16, DOWN)
  let multK = fraction(toBigInt(paulB), multExpInPower, BIGPAULI)

  (a, paulB, wReservesInUsdn, multBR, multPower, multExpInPower, multK)
}

# explicit parameters were introduced to simplify testing
func curveFunction(wRaw: Int, uRaw: Int, price: Int, mRaw: Int, sRaw: Int, wavesPayRaw: Int) = {
    let kCalcArray = calculateK(wRaw, uRaw, price, mRaw, sRaw)
    let multK = kCalcArray._7

    let usdnPay = convertWavesToNeutrino(wavesPayRaw, price)
    let bigMaxNsbtSupply = toBigInt(mRaw)
    let bigNsbtSupply = toBigInt(mRaw-sRaw)

    let step1 = fraction(toBigInt(usdnPay), BIGMULT16, multK)
    let step2 = fraction(step1, bigNsbtSupply, bigMaxNsbtSupply)
    let step3 = fraction(bigNsbtSupply, bigMaxNsbtSupply, step2 + bigMaxNsbtSupply).toInt()
    let nsbtAmountRaw = mRaw - sRaw - step3

    (nsbtAmountRaw, usdnPay, wRaw, uRaw, mRaw, sRaw, kCalcArray._1, kCalcArray._2, kCalcArray._3, price,
     kCalcArray._4, kCalcArray._5, kCalcArray._6, multK, step1, step2, step3)
}
#-------------------Callable---------------------------

func toStr(name: String, curveResult: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, BigInt, BigInt, BigInt, BigInt, Int)) = {
    name + "[nsbtAmountRaw="    + curveResult._1.toString()
        + " usdnPayment="       + curveResult._2.toString()
        + " wRaw="              + curveResult._3.toString()
        + " uRaw="              + curveResult._4.toString()
        + " mRaw="              + curveResult._5.toString()
        + " sRaw="              + curveResult._6.toString()
        + " nsbtCurveParam_a="  + curveResult._7.toString()
        + " nsbtCurveParam_b="  + curveResult._8.toString()
        + " wReservesInUsdn="   + curveResult._9.toString()
        + " price="             + curveResult._10.toString()
        + " multBR="            + curveResult._11.toString()
        + " multPower="         + curveResult._12.toString()
        + " multExpInPower="    + curveResult._13.toString()
        + " multK="             + curveResult._14.toString()
        + " step1="             + curveResult._15.toString()
        + " step2="             + curveResult._16.toString()
        + " step3="             + curveResult._17.toString()
        + "]"
}

@Callable(i)
func buyNsbt() = {
    let pmt = i.payments[0].value()
    let pmtAmount = pmt.amount
    let wavesPay = pmtAmount
    let ownerAddress = i.caller

    if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles") else
    if (isDefined(pmt.assetId)) then throw("can use waves only") else
    if (pmtAmount < 10 * WAVELET) then throw("min 10 waves expected") else

    let curveResult = curveFunction(reserve, neutrinoSupply, currentPrice, nsbtSupplyMAX, nsbtSupply, wavesPay)
    let nsbtAmount = curveResult._1

    if (nsbtAmount <= 0) then throw("nsbtAmount <= 0") else
    if (nsbtAmount * 9223372 < wavesPay) then throw("Nsbt2Waves price exceeds MAX_INT: " + toString(wavesPay) + "/" + toString(nsbtAmount)) else {
        let nsbt2WavesPriceRaw = calcNsbt2WavesPriceRaw(wavesPay, nsbtAmount)
        let roi = 0

        # replacement of ScriptTransfer(neutrinoContract, wavesPay, unit)
        # now Neutrino callable leaseWaves() puts all waves to leasing immediately
        strict a = invoke(neutrinoContract, "leaseWaves", nil, i.payments)
        if ((a != a)) then throw("Strict value is not equal to itself.") else {
            let amountLeased = match a {
                case a: Int => a
                case _ => throw("Neutrino leaseWaves() should return integer")
            }

            (orderData(i.transactionId.toBase58String(), pmtAmount, pmtAmount, ownerAddress.toString(), FILLED,
                        roi,                # to keep backward compatability with prev. format
                        nsbt2WavesPriceRaw) # to keep backward compatability with prev. format
            ++ [
              ScriptTransfer(ownerAddress, nsbtAmount, nsbtAssetId),
              StringEntry("debug_curveResult", toStr("curveResult", curveResult))
            ],
            nsbtAmount)
        }
    }
}


# cancel buy NSBT order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    let caller = toString(i.caller)

    let nextOrder = getNextOrder(orderId)
    let prevOrder = getPrevOrder(orderId)

    if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {[
        StringEntry(FirstOrderKey, if firstOrder == orderId then nextOrder else firstOrder),

        StringEntry(getNextOrderKey(prevOrder), nextOrder),
        StringEntry(getPrevOrderKey(nextOrder), prevOrder),
        StringEntry(getOrderStatusKey(orderId), CANCELED),
        ScriptTransfer(i.caller, amount, unit)]
    }
}


@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "GJdLSaLiv5K7xuejac8mcRcHoyo3dPrESrvktG3a6MAR",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
