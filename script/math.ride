{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let revisionNum = ""

#-------------------Constants---------------------------
let WAVELET          = 1_0000_0000
let PAULI            = 1_000_000
let BIGPAULI         = 1_000_000.toBigInt()
let PRICELET         = 1_000_000    # 10^6
let MULT             = 1_0000_0000  # 10^8
let BIGMULT16        = 1_0000_0000_0000_0000.toBigInt() #10^16
let MULTSCALE        = 8
let SCALE16          = 16
let SEP              = "__"
let HALF8            = 5000_0000 # 0.5
let EULERNUMBER      = 27182818284590452.toBigInt()      # scale16
let scale6           = 1_000_000
let scale6BigInt     = 1_000_000.toBigInt()
let scale8BigInt     = 100_000_000.toBigInt()
let scale10BigInt     = 10_000_000_000.toBigInt()

# indices for calculateKREADONLY result array
let kResultIdxA = 0
let kResultIdxPaulB = 1
let kResultIdxWReservesInUsdn = 2
let kResultIdxMultBR = 3 # BR with 8 decimals
let kResultIdxMultPower = 4
let kResultIdxMultExpInPowerStr = 5
let kResultIdxMultKStr = 6

#indices for calcNeutinoMetricsREADONLY result array
let nMetricIdxPrice = 0
let nMetricIdxUsdnLockedBalance = 1
let nMetricIdxWavesLockedBalance = 2
let nMetricIdxReserve = 3
let nMetricIdxReserveInUsdn = 4
let nMetricIdxUsdnSupply = 5
let nMetricIdxSurplus = 6
let nMetricIdxSurplusPercent = 7
let nMetricIdxBR = 8 # BR with 6 decimals
let nMetricIdxNsbtSupply = 9
let nMetricIdxMaxNsbtSupply = 10

#-------this keys---------
func keyNeutrinoAddress()     = "%s%s__config__neutrinoAddress"
func keySwapAmountAParam()    = "%s%s__config__swapAParam"
#-------neutrino keys------
func keyNeutrinoAssetId()            = "neutrino_asset_id"
func keyLiquidationContractAddress() = "liquidation_contract"
func keyAuctionContract()            = "auction_contract"
func keyContolContract()             = "control_contract"
func keyBondAssetId()                = "bond_asset_id"
func keyBalanceLocked()              = "balance_lock_"
func keyWavesLockedBalance()         = keyBalanceLocked() + "waves"
func keyNeutrinoLockedBalance()      = keyBalanceLocked() + "neutrino"
func swapsTimeframeKEY()             = "swaps_timeframe"
func keyUserLastQuickSwapHeight(userAddress: String) = ["%s%s", "userLastQuickSwapHeight", userAddress].makeString(SEP)
func keyQuickSwapUserSpentInPeriod(userAddress: String) = ["%s%s", "quickSwapUserSpentInPeriod", userAddress].makeString(SEP)

#------control keys-------
func keyPrice() = "price"

#-------------------Base functions----------------------
func getStringOrFail(address: Address, key: String)  = address.getString(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getIntOrFail(address: Address, key: String)     = address.getInteger(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getNumberByKey(address: Address, key: String)   = address.getInteger(key).valueOrElse(0)
func getBoolOrFail(address: Address, key: String)    = address.getBoolean(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, PRICELET, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, PRICELET), PAULI, WAVELET)
func toX16(origVal: Int, origScaleMult: Int)         = fraction(origVal.toBigInt(), BIGMULT16, origScaleMult.toBigInt())
func fromX16(val: BigInt, resultScaleMult: Int)      = fraction(val, resultScaleMult.toBigInt(), BIGMULT16).toInt()
func asAnyList(val: Any) = {
  match val {
    case valAnyLyst: List[Any] => valAnyLyst
    case _ => throw("fail to cast into List[Any]")
  }
}
func asInt(val: Any) = {
  match val {
    case valInt: Int => valInt
    case _ => throw("fail to cast into Int")
  }
}
func asString(val: Any) = {
  match val {
    case valStr: String => valStr
    case _ => throw("fail to cast into String")
  }
}

#-------------------GLOBAL VARIABLES-------------------------
let neutrinoContract     = addressFromStringValue(this.getStringOrFail(keyNeutrinoAddress()))
let controlContract      = addressFromStringValue(neutrinoContract.getStringOrFail(keyContolContract()))
let auctionContract      = addressFromStringValue(neutrinoContract.getStringOrFail(keyAuctionContract()))
let liquidationContract  = addressFromStringValue(neutrinoContract.getStringOrFail(keyLiquidationContractAddress()))

let neutrinoAssetId       = fromBase58String(neutrinoContract.getStringOrFail(keyNeutrinoAssetId()))
let nsbtAssetId           = fromBase58String(neutrinoContract.getStringValue(keyBondAssetId()))

@Callable(i)
func constructor(neutrinoAddress: String, nsbtLockAddress: String, swapAmountAParam: Int) = {
  if (i.caller != this) then throw("not authorized") else
  [
      StringEntry(keyNeutrinoAddress(), neutrinoAddress),
      IntegerEntry(keySwapAmountAParam(), swapAmountAParam)
  ]
}

@Callable(i)
func calcSwapLimitREADONLY(gNsbtAmount: Int) = {
  # limit = a * gNsbtAmount^e
  let limitParamA  = this.getIntOrFail(keySwapAmountAParam()).toBigInt() # A is scale8
  let gNsbtAmountScale16 = toX16(gNsbtAmount, scale6) # scale6
  let limitPowPart = pow(gNsbtAmountScale16, 16, EULERNUMBER, 16, 8, CEILING)
  let limit = fraction(limitParamA, limitPowPart, scale10BigInt)
  ([],  (limit.toInt()))
}

# AUCTION MOON FACTOR
@Callable(i)
func calculateKREADONLY(wRaw: Int, uRaw: Int, price: Int, mRaw: Int, sRaw: Int) = {
  let EXP = 2718281.toBigInt()
  let EXPSCALE = 6

  let a = auctionContract.getInteger("nsbtCurveParam_a").valueOrElse(3)
  let paulB = auctionContract.getInteger("nsbtCurveParam_b").valueOrElse((3*PAULI)/10)

  let wReservesInUsdn = convertWavesToNeutrino(wRaw, price)
  let multBR = fraction(wReservesInUsdn, MULT, uRaw) # BR with 8 decimals
  if (multBR > 10678564816) then throw("BR > 10678.564816% will overflow exponent") else

  let multPower = a * (multBR - MULT) # a*(BR-1) with 8 decimals
  let multExpInPower = pow(EXP, EXPSCALE, toBigInt(multPower), MULTSCALE, SCALE16, DOWN) # 16 decimals
  let multK = fraction(toBigInt(paulB), multExpInPower, BIGPAULI)

  ([], [a, paulB, wReservesInUsdn, multBR, multPower, multExpInPower.toString(), multK.toString()])
}

# AUCTION MOON FACTOR

@Callable(i)
func curveFunctionREADONLY(wavesPayRaw: Int) = {
    let neutrinoMetrics = this.invoke("calcNeutinoMetricsREADONLY", [], []).asAnyList()
    let price  = neutrinoMetrics[nMetricIdxPrice].asInt()
    let wRaw   = neutrinoMetrics[nMetricIdxReserve].asInt()
    let uRaw   = neutrinoMetrics[nMetricIdxUsdnSupply].asInt()
    let sRaw   = neutrinoMetrics[nMetricIdxNsbtSupply].asInt()
    let mRaw   = neutrinoMetrics[nMetricIdxMaxNsbtSupply].asInt()

    let kCalcArray = this.invoke("calculateKREADONLY", [wRaw, uRaw, price, mRaw, sRaw], []).asAnyList()

    let multK = kCalcArray[kResultIdxMultKStr].asString().parseBigIntValue()

    let usdnPay = convertWavesToNeutrino(wavesPayRaw, price)
    let bigMaxNsbtSupply = toBigInt(mRaw)
    let bigNsbtSupply = toBigInt(mRaw-sRaw)

    let step1 = fraction(toBigInt(usdnPay), BIGMULT16, multK)
    let step2 = fraction(step1, bigNsbtSupply, bigMaxNsbtSupply)
    let step3 = fraction(bigNsbtSupply, bigMaxNsbtSupply, step2 + bigMaxNsbtSupply).toInt()
    let nsbtAmountRaw = mRaw - sRaw - step3

    ([], [nsbtAmountRaw, usdnPay, wRaw, uRaw, mRaw, sRaw, kCalcArray[kResultIdxA].asInt(),
      kCalcArray[kResultIdxPaulB].asInt(), kCalcArray[kResultIdxWReservesInUsdn].asInt(), price,
      kCalcArray[kResultIdxMultBR].asInt(), kCalcArray[kResultIdxMultPower].asInt(),
      kCalcArray[kResultIdxMultExpInPowerStr], kCalcArray[kResultIdxMultKStr],
      step1.toString(), step2.toString(), step3])
}

@Callable(i)
func calcContractNsbtPriceSYSREADONLY(nsbtSupplyDELTA: Int) = {
  let neutrinoMetrics = this.invoke("calcNeutinoMetricsREADONLY", [], []).asAnyList()
  let price  = neutrinoMetrics[nMetricIdxPrice].asInt()
  let wRaw   = neutrinoMetrics[nMetricIdxReserve].asInt()
  let uRaw   = neutrinoMetrics[nMetricIdxUsdnSupply].asInt() - nsbtSupplyDELTA
  let sRaw   = neutrinoMetrics[nMetricIdxNsbtSupply].asInt() + nsbtSupplyDELTA
  let mRaw   = neutrinoMetrics[nMetricIdxMaxNsbtSupply].asInt()

  let kCalcArray = this.invoke("calculateKREADONLY", [wRaw, uRaw, price, mRaw, sRaw], []).asAnyList()
  let multKX16 = kCalcArray[kResultIdxMultKStr].asString().parseBigIntValue() # 16 decimals bigint

  let multStep1X16 = fraction(mRaw.toBigInt(), BIGMULT16, (mRaw - sRaw).toBigInt())
  let multStep2X16 = fraction(multStep1X16, multStep1X16, BIGMULT16)
  let multNsbt2usdnPriceX16 = fraction(multKX16, multStep2X16, BIGMULT16)

  let nsbt2usdnPrice = fraction(multNsbt2usdnPriceX16, PAULI.toBigInt(), BIGMULT16).toInt()
  let nsbt2wavesPrice = fraction(nsbt2usdnPrice, PAULI, price)
  ([], [nsbt2usdnPrice, nsbt2wavesPrice])
}

@Callable(i)
func calcNeutinoMetricsREADONLY() = {
  let currentPrice = controlContract.getIntegerValue(keyPrice()) # The value from control.ride
  let neutrinoLockedBalance = neutrinoContract.getInteger(keyNeutrinoLockedBalance()).valueOrElse(0) #locked balance from USDN -> WAVES swap
  let wavesLockedBalance = neutrinoContract.getInteger(keyWavesLockedBalance()).valueOrElse(0)   #locked balance from WAVES -> USDN swap
  let reserve = wavesBalance(neutrinoContract).regular - wavesLockedBalance #waves reserves to cover USDN supply
  let reservesInUsdn = convertWavesToNeutrino(reserve, currentPrice)
  let neutrinoSupply = neutrinoLockedBalance + assetInfo(neutrinoAssetId).value().quantity - assetBalance(neutrinoContract, neutrinoAssetId)
    - assetBalance(liquidationContract, neutrinoAssetId) # supply outside main sc or liquidation contract
  let surplus = reservesInUsdn - neutrinoSupply
  let deficit = neutrinoSupply - reservesInUsdn
  let surplusPercent = if (neutrinoSupply == 0) then 0 else fraction(surplus, PAULI, neutrinoSupply) * 100
  let BR = if (neutrinoSupply == 0) then 0 else fraction(reservesInUsdn, PAULI, neutrinoSupply)
  let nsbtSupplyMAX =  assetInfo(nsbtAssetId).value().quantity
  let nsbtSupply = nsbtSupplyMAX - auctionContract.assetBalance(nsbtAssetId)

  ([], [currentPrice, neutrinoLockedBalance, wavesLockedBalance, reserve, reservesInUsdn,
    neutrinoSupply, surplus, surplusPercent, BR, nsbtSupply, nsbtSupplyMAX])
}

@Callable(i)
func getUnstakeComissionAmountREADONLY(amount: Int, startHeight: Int, halfLife: Int) = {
  ([], fraction(amount, pow(2, 0, fraction(-(height - startHeight), MULT, halfLife), 8, 8, HALFUP), MULT))
}

# find out merged stake effective height
@Callable(i)
func mergeStakesREADONLY(amount1: Int, height1: Int, amount2: Int, height2: Int, halfLife: Int) = {
  let w = fraction(amount2, pow(2, 0, fraction(height2 - height1, MULT, halfLife), 8, 8, HALFUP), MULT)
  let v = fraction(amount1 + amount2, MULT, amount1 + w)
  ([], height1 + (HALF8 - halfLife * log(v, 8, 2, 0, 8, HALFUP)) / MULT)
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "GJdLSaLiv5K7xuejac8mcRcHoyo3dPrESrvktG3a6MAR",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
