{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract for Price Oracles and Emergency Oracles of Neutrino Protocol
#
let revisionNum = ""

let SEP = "__"

# Common lib
func asString(v: Any) = {
  match v {
    case s: String => s
    case _ => throw("fail to cast into String")
  }
}
func asInt(v: Any) = {
  match v {
    case i: Int => i
    case _ => throw("fail to cast into Int")
  }
}

#------------------------
# CONTRACT FUNCTIONS
#------------------------
# data indices from controlConfig
let IdxControlCfgNeutrinoDapp     = 1
let IdxControlCfgAuctionDapp      = 2
let IdxControlCfgRpdDapp          = 3
let IdxControlCfgMathDapp         = 4
let IdxControlCfgLiquidationDapp  = 5
let IdxControlCfgRestDapp         = 6
let IdxControlCfgNodeRegistryDapp = 7
let IdxControlCfgNsbtStakingDapp  = 8
let IdxControlCfgMediatorDapp     = 9
let IdxControlCfgSurfStakingDapp  = 10
let IdxControlCfgGnsbtControllerDapp = 11
let IdxControlCfgRestV2Dapp       = 12
let IdxControlCfgGovernanceDapp   = 13
let IdxControlCfgPegProviderDapp  = 14
let IdxControlCfgFacadeDapp       = 15
let IdxControlCfgWindPoolDapp     = 16
let ContractsListSize = IdxControlCfgWindPoolDapp

func keyControlConfig() = "%s__controlConfig"
func keyPriceByAsset(assetIdStr: String) = ["%s%s%s__common__priceByAsset",  assetIdStr].makeString(SEP)
func keyBlackSwanThreshold() = "%s%s__controlConfig__blackSwanThreshold"

func dataControlCfg(contractsList: List[String]) = {
  let formatPrefix = "%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s"
  if (formatPrefix.size() != ContractsListSize * 2) then throw("Size of format specifier does not match") else

  makeString_2C(formatPrefix :: contractsList, SEP)
}

#-------------------Functions----------------------
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, 1000000), 1000000, 100000000)

func getNumberByAddressAndKey(address: String, key: String) = {
    getInteger(addressFromStringValue(address), key).valueOrElse(0)
}

func getStringByAddressAndKey(address: Address, key: String) = {
     getString(address, key).valueOrElse("")
}

func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Constants---------------------------

#-------------------Constructor-------------------------

#-------------------Keys---------------------------------
#------This contract----------

#-------------------Global vars-------------------------
let price = getInteger(this, "price").valueOrElse(0)

#let priceIndex = getNumberByKey("price_index")
let priceIndex = getInteger(this, "price_index").valueOrElse(0)

let isBlocked = getBoolean(this, "is_blocked").valueOrElse(false)

# configured in percentiles, i.e. 7%=7 or 27%=27
let percentPriceOffset = getInteger(this, keyBlackSwanThreshold()).valueOrElse(7)

let pubKeyOracles = getString(this, "oracles").valueOrElse("")
let pubKeyOraclesList = convertJsonArrayToList(pubKeyOracles)

#-------------------Get func----------------------------

#-------------------Other func--------------------------


let neutrinoAddress     = Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo')
let liquidationAddress  = Address(base58'3P4PCxsJqMzQBALo8zANHtBDZRRquobHQp7')
let neutrinoAsset       = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'

let controlContract     = this
func getStringOrFail(address: Address, key: String)  = address.getString(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getContractAddressOrFail(controlCfg: List[String], idx: Int) = controlCfg[idx].addressFromString()
  .valueOrErrorMessage("Control cfg doesn't contain address at index " + idx.toString())
let controlCfg = split_4C(this.getStringOrFail(keyControlConfig()), SEP)
let governanceContract = controlCfg.getContractAddressOrFail(IdxControlCfgGovernanceDapp)

#locked balance from USDN -> WAVES swap
let neutrinoLockedBalance = getInteger(neutrinoAddress, "balance_lock_neutrino").valueOrElse(0)

#locked balance from WAVES -> USDN swap
let wavesLockedBalance = getInteger(neutrinoAddress, "balance_lock_waves").valueOrElse(0)

let reserve = wavesBalance(neutrinoAddress).regular - wavesLockedBalance #waves reserves to cover USDN supply
let neutrinoSupply = neutrinoLockedBalance + assetInfo(neutrinoAsset).value().quantity - assetBalance(neutrinoAddress, neutrinoAsset)
    - assetBalance(liquidationAddress, neutrinoAsset) # supply outside main sc or liquidation contract
let deficit = neutrinoSupply - convertWavesToNeutrino(reserve, price)


let doraAddressStr = "3PKkojKdd6BBzTf1RXbQVfUDraNFXXHKzQF"
let doraAddress = doraAddressStr.addressFromStringValue()
let xtnUsdPriceX6 = doraAddress.getInteger("%s%s__price__USDN-USDT").valueOrErrorMessage("DORA doesn't contain USDN/USDT price")

let wx_restAddressStr = "3P8MoPnsaurofk1VyhsdAFkeQ6ijpJYXCpW"
let wx_restDapp = wx_restAddressStr.addressFromStringValue()
let swopRestDapp = "3P56jNQzECXnrWpnbbSJKw7Eooo6fkUaMPp".addressFromStringValue()

let xtnId    = neutrinoAsset
let xtnIdStr = xtnId.toBase58String()

let wxIdStr             = "Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on"
let wxId                = wxIdStr.fromBase58String()

let viresIdStr          = "DSbbhLsSTeDg5Lsiufk2Aneh3DjVqJuPr2M9uU1gwy5p"
let viresId             = viresIdStr.fromBase58String()

let windIdStr           = "6TXFMpr6rG4tr2CuPmVRq1NsjgPLJ59s2VMVnL1ZLtpR"
let windId              = windIdStr.fromBase58String()

func findPricesInRange(prices: List[Int]) = {
    let minPercentBound = 90
    let maxPercentBound = 110
    let p0 = prices[0]

    let check0 = if (prices[0] <= 0) then [0] else {
        let p01 = prices[1] * 100 / p0
        let p02 = prices[2] * 100 / p0
        let p03 = prices[3] * 100 / p0
        let p04 = prices[4] * 100 / p0

        let array1 = if(p01 < maxPercentBound && p01 > minPercentBound) then 1::[0] else [0]
        let array2 = if(p02 < maxPercentBound && p02 > minPercentBound) then 2::array1 else array1
        let array3 = if(p03 < maxPercentBound && p03 > minPercentBound) then 3::array2 else array2
        if(p04 < maxPercentBound && p04 > minPercentBound) then 4::array3 else array3
    }

    let check1 = if (check0.size() >= 3) then check0 else {
        let p1 = prices[1]
        if (p1 <= 0) then [1] else {
            let p10 = prices[0] * 100 / p1
            let p12 = prices[2] * 100 / p1
            let p13 = prices[3] * 100 / p1
            let p14 = prices[4] * 100 / p1

            let array1 = if(p10 < maxPercentBound && p10 > minPercentBound) then 0::[1] else [1]
            let array2 = if(p12 < maxPercentBound && p12 > minPercentBound) then 2::array1 else array1
            let array3 = if(p13 < maxPercentBound && p13 > minPercentBound) then 3::array2 else array2
            if(p14 < maxPercentBound && p14 > minPercentBound) then 4::array3 else array3
        }
    }

    let check2 = if (check1.size() >= 3) then check1 else {
        let p2 = prices[2]
        if (p2 <= 0) then [2] else {
            let p20 = prices[0] * 100 / p2
            let p21 = prices[1] * 100 / p2
            let p23 = prices[3] * 100 / p2
            let p24 = prices[4] * 100 / p2

            let array1 = if (p20 < maxPercentBound && p20 > minPercentBound) then 0::[2] else [2]
            let array2 = if(p21 < maxPercentBound && p21 > minPercentBound) then 1::array1 else array1
            let array3 = if(p23 < maxPercentBound && p23 > minPercentBound) then 3::array2 else array2
            if(p24 < maxPercentBound && p24 > minPercentBound) then 4::array3 else array3
        }
    }

    let check3 = if (check2.size() >= 3) then check2 else {
        let p3 = prices[3]
        if (p3 <= 0) then [3] else {
            let p30 = prices[0] * 100 / p3
            let p31 = prices[1] * 100 / p3
            let p32 = prices[2] * 100 / p3
            let p34 = prices[4] * 100 / p3

            let array1 = if (p30 < maxPercentBound && p30 > minPercentBound) then 0::[3] else [3]
            let array2 = if(p31 < maxPercentBound && p31 > minPercentBound) then 1::array1 else array1
            let array3 = if(p32 < maxPercentBound && p32 > minPercentBound) then 2::array2 else array2
            if(p34 < maxPercentBound && p34 > minPercentBound) then 4::array3 else array3
        }
    }

    if (check3.size() >= 3) then check3 else {
        let p4 = prices[4]
        if (p4 <= 0) then [4] else {
            let p40 = prices[0] * 100 / p4
            let p41 = prices[1] * 100 / p4
            let p42 = prices[2] * 100 / p4
            let p43 = prices[3] * 100 / p4

            let array1 = if (p40 < maxPercentBound && p40 > minPercentBound) then 0::[4] else [4]
            let array2 = if(p41 < maxPercentBound && p41 > minPercentBound) then 1::array1 else array1
            let array3 = if(p42 < maxPercentBound && p42 > minPercentBound) then 2::array2 else array2
            if(p43 < maxPercentBound && p43 > minPercentBound) then 3::array3 else array3
        }
    }
}

func formattingPriceMsg(price: Int) = {
    toBytes("WAVESNEUTRINOPREFIX" + "_" + toString(height) + "_" + toString(price))
}

func PriceEntry(newPrice: Int, assetIdStr: String, newPriceIndex: Int) = {
  let heightStr = height.toString()
  let newPriceIndexStr = newPriceIndex.toString()

  let priceByHeightKEY = ["%s%s%s%d__common__priceByHeight", assetIdStr, heightStr].makeString(SEP)
  let priceByIndexKEY  = ["%s%s%s%d__common__priceByIndex",  assetIdStr, newPriceIndexStr].makeString(SEP)

  [
  IntegerEntry(keyPriceByAsset(assetIdStr), newPrice), # current price
  IntegerEntry(priceByIndexKEY, newPrice), # price by index
  IntegerEntry(priceByHeightKEY, newPrice) # price by height
  ]
}

func finalizeWindUsdOnchain(wavesUsdPriceX6: Int) = {
  let wx_WindWaves_lp = "2dQqyqwo8S26kVUnFAe5LqHgNtU8FYG8vvZkrEzLEkiv"
  let wxRestResult = wx_restDapp.invoke("poolStatsREADONLY", [wx_WindWaves_lp], []).asString().split("__")
  let wx_WindWaves_WAVESx8  = wxRestResult[2].parseIntValue()
  let wx_WindWaves_Windx8  = wxRestResult[1].parseIntValue()
  let wx_WindWaves_WindUsdPriceX6  = fraction(wx_WindWaves_WAVESx8, wavesUsdPriceX6, wx_WindWaves_Windx8) # 1.74275614085 * 3.97

  let debug = "wx_WindWaves_WindUsdPriceX6=" + wx_WindWaves_WindUsdPriceX6.toString()
  (wx_WindWaves_WindUsdPriceX6, debug)
}

func finalizeViresUsdOnchain(wavesUsdPriceX6: Int) = {
  let wx_ViresWaves_lp = "E3YhURNsCmjUaYNigH6AayLxbh9u81uVGU3ZvHKznY5v"
  let wxRestResult = wx_restDapp.invoke("poolStatsREADONLY", [wx_ViresWaves_lp], []).asString().split("__")

  let wx_ViresWaves_WAVESx8  = wxRestResult[2].parseIntValue()
  let wx_ViresWaves_VIRESx8  = wxRestResult[1].parseIntValue()
  let wx_ViresWaves_ViresUsdPriceX6  = fraction(wx_ViresWaves_WAVESx8, wavesUsdPriceX6, wx_ViresWaves_VIRESx8)
  let wx_ViresWaves_Weight = wx_ViresWaves_VIRESx8

  let wx_ViresXtn_AddressStr = "3P5HjPowgipiVB3UvXphDiPvKs424WC9xQw"
  let wx_ViresXtn_Address = wx_ViresXtn_AddressStr.addressFromStringValue()
  let wx_ViresXtn_XTNx6   = wx_ViresXtn_Address.assetBalance(xtnId)
  let wx_ViresXtn_VIRESx8 = wx_ViresXtn_Address.assetBalance(viresId)
  let wx_ViresXtn_ViresUsdPriceX6  = fraction(wx_ViresXtn_XTNx6*100, xtnUsdPriceX6, wx_ViresXtn_VIRESx8)
  let wx_ViresXtn_Weight = wx_ViresXtn_VIRESx8

  let swop_ViresXtn_AddressStr = "3PJ48P3p2wvWUjgQaQiZ2cFbr8qmxMokBGd"
  let swop_ViresXtn_Address = swop_ViresXtn_AddressStr.addressFromStringValue()
  let swop_ViresXtn_ViresXtnPriceX6 = swopRestDapp.invoke("calcGetAmountCPMM", [swop_ViresXtn_AddressStr, "3P88qk1KzF1BKjD7fC7LjNVAKM4ezff5WE6", viresIdStr, 1_00_000_000], []).asInt()
  let swop_ViresXtn_ViresUsdPriceX6 = fraction(swop_ViresXtn_ViresXtnPriceX6, xtnUsdPriceX6, 1000_000)
  let swop_ViresXtn_Weight = swop_ViresXtn_Address.getIntegerValue("A_asset_balance")

  let W = wx_ViresWaves_Weight + wx_ViresXtn_Weight + swop_ViresXtn_Weight
  let viresUsdPriceX6 =
        fraction(wx_ViresWaves_ViresUsdPriceX6, wx_ViresWaves_Weight,  W)
      + fraction(wx_ViresXtn_ViresUsdPriceX6,   wx_ViresXtn_Weight,    W)
      + fraction(swop_ViresXtn_ViresUsdPriceX6, swop_ViresXtn_Weight,  W)

  let debug = "xtnUsdPriceX6=" + xtnUsdPriceX6.toString()
          + " wx_ViresWaves_ViresUsdPriceX6=" + wx_ViresWaves_ViresUsdPriceX6.toString()
          + " wx_ViresXtn_ViresUsdPriceX6=" + wx_ViresXtn_ViresUsdPriceX6.toString()
          + " swop_ViresXtn_ViresUsdPriceX6=" + swop_ViresXtn_ViresUsdPriceX6.toString()
  (viresUsdPriceX6, debug)
}

func finalizeWxUsdOnchain(wavesUsdPriceX6: Int) = {
  let wx_WxWaves_lp = "BiSzFe8nSL78oZaebfoin5vBZ5Pze6d7kaeijLqr5xZe"
  let wxRestResult = wx_restDapp.invoke("poolStatsREADONLY", [wx_WxWaves_lp], []).asString().split("__")

  let wx_WxWaves_Weight   = 50000
  let wx_WxWaves_WAVESx8  = wxRestResult[2].parseIntValue()
  let wx_WxWaves_WXx8     = wxRestResult[1].parseIntValue()
  let wx_WxWaves_WxUsdPriceX6  = fraction(wx_WxWaves_WAVESx8, wavesUsdPriceX6, wx_WxWaves_WXx8)

  let wx_WxXtn_AddressStr = "3PCENpEKe8atwELZ7oCSmcdEfcRuKTrUx99"
  let wx_WxXtn_Address = wx_WxXtn_AddressStr.addressFromStringValue()
  let wx_WxXtn_Weight = 50000
  let wx_WxXtn_XTNx6  = wx_WxXtn_Address.assetBalance(xtnId)
  let wx_WxXtn_WXx8   = wx_WxXtn_Address.assetBalance(wxId)
  let wx_WxXtn_WxUsdPriceX6  = fraction(wx_WxXtn_XTNx6*100, xtnUsdPriceX6, wx_WxXtn_WXx8)

  let swop_WxXtn_AddressStr = "3PKi4G3VX2k42ZSmNNrmvgdDH7JzRaUhY7R"
  let swop_WxXtn_Weight = 5000
  let swop_WxXtn_WxXtnPriceX6 = swopRestDapp.invoke("calcGetAmountCPMM", [swop_WxXtn_AddressStr, "3P88qk1KzF1BKjD7fC7LjNVAKM4ezff5WE6", wxIdStr, 1_00_000_000], []).asInt()
  let swop_WxXtn_WxUsdPriceX6 = fraction(swop_WxXtn_WxXtnPriceX6, xtnUsdPriceX6, 1000_000)

  let W = wx_WxWaves_Weight + wx_WxXtn_Weight + swop_WxXtn_Weight
  let wxUsdPriceX6 =
        fraction(wx_WxWaves_WxUsdPriceX6, wx_WxWaves_Weight,  W)
      + fraction(wx_WxXtn_WxUsdPriceX6,   wx_WxXtn_Weight,    W)
      + fraction(swop_WxXtn_WxUsdPriceX6, swop_WxXtn_Weight,  W)

  let debug = "xtnUsdPriceX6=" + xtnUsdPriceX6.toString()
          + " wx_WxWaves_WxUsdPriceX6=" + wx_WxWaves_WxUsdPriceX6.toString()
          + " wx_WxXtn_WxUsdPriceX6=" + wx_WxXtn_WxUsdPriceX6.toString()
          + " swop_WxXtn_WxUsdPriceX6=" + swop_WxXtn_WxUsdPriceX6.toString()

  (wxUsdPriceX6, debug)
}

func checkPrices(newWavesPrice: Int, newWxPrice: Int, newViresPrice: Int) = {
  func isBlackSwan(curPr: Int, newPr: Int) = newPr >= (curPr+curPr*percentPriceOffset/100) || newPr <= (curPr-curPr*percentPriceOffset/100)

  let wxPrice = getInteger(keyPriceByAsset(wxIdStr)).valueOrElse(0)
  let viresPrice = getInteger(keyPriceByAsset(viresIdStr)).valueOrElse(0)

  if(isBlackSwan(price, newWavesPrice)) then
    (true, "WAVES", newWavesPrice) else
  if(isBlackSwan(wxPrice, newWxPrice)) then
    (true, wxIdStr, newWxPrice) else
  if(isBlackSwan(viresPrice, newViresPrice)) then
    (true, viresIdStr, newViresPrice) else
  (false, "", 0)
}

@Callable(i)
func constructorV2(contractsList: List[String]) = {
  if (i.caller != this) then throw("permissions denied") else
  if (contractsList.size() != ContractsListSize) then throw("Wrong number of contracts in the list") else

  [StringEntry(keyControlConfig(), dataControlCfg(contractsList))]
}

#-------------------Callable----------------------
# [called by price oracles]
# only price oracles can block smart contract untill another price oracle will unblock it
@Callable(i)
func callEmergencyShutdown(reason: String) = {
    let AutoEmergencyOracleAddress = "3P7ihFVxBNbHK237TNdPxT1xHEu8pHexXTr"
    let callerAddress = toString(i.caller)
    if (AutoEmergencyOracleAddress != callerAddress && governanceContract.toString() != callerAddress) then
        throw("caller must be one an emergency oracle or Governance contract") else
    [BooleanEntry("is_blocked", true),
      StringEntry("is_blocked_caller", callerAddress),
      StringEntry("is_blocked_reason", reason)]
}

# [called by price oracles]
@Callable(i)
func finalizeCurrentPrice(price1: Int, sign1: ByteVector, price2: Int, sign2: ByteVector, price3: Int, sign3: ByteVector, price4: Int, sign4: ByteVector, price5: Int, sign5: ByteVector) = {
    if(isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") else
    if (getInteger(this, "price_" + toString(height)).valueOrElse(0) != 0) then throw("wait next block") else
    if (pubKeyOraclesList[height % 5] != toBase58String(i.callerPublicKey)) then throw("Out of turn finalization: "
             + toString(height) + " block should be finalize by " + pubKeyOraclesList[height % 5]) else

    let prices = [
        if sigVerify_8Kb(formattingPriceMsg(price1), sign1, fromBase58String(pubKeyOraclesList[0])) then price1 else 0,
        if sigVerify_8Kb(formattingPriceMsg(price2), sign2, fromBase58String(pubKeyOraclesList[1])) then price2 else 0,
        if sigVerify_8Kb(formattingPriceMsg(price3), sign3, fromBase58String(pubKeyOraclesList[2])) then price3 else 0,
        if sigVerify_8Kb(formattingPriceMsg(price4), sign4, fromBase58String(pubKeyOraclesList[3])) then price4 else 0,
        if sigVerify_8Kb(formattingPriceMsg(price5), sign5, fromBase58String(pubKeyOraclesList[4])) then price5 else 0
    ]

    let zeroPriceCount = if (prices[0] == 0) then 1 else 0
            + if (prices[1] == 0) then 1 else 0
            + if (prices[2] == 0) then 1 else 0
            + if (prices[3] == 0) then 1 else 0
            + if (prices[4] == 0) then 1 else 0

    if (zeroPriceCount >= 3) then throw("3 prices or more are equals to 0") else

    let pricesInRange = findPricesInRange(prices)
    let priceProvidingCount = pricesInRange.size();

    if (priceProvidingCount < 3) then throw("Could not finalize price because of big variation: height=" + toString(height)
             + "\n" + pubKeyOraclesList[0]  + "=" + toString(prices[0])
             + "\n" + pubKeyOraclesList[1] + "=" + toString(prices[1])
             + "\n" + pubKeyOraclesList[2] + "=" + toString(prices[2])
             + "\n" + pubKeyOraclesList[3] + "=" + toString(prices[3])
             + "\n" + pubKeyOraclesList[4] + "=" + toString(prices[4])) else

    let sum1 = prices[pricesInRange[0]] + prices[pricesInRange[1]] + prices[pricesInRange[2]]
    let sum2 = if (priceProvidingCount >= 4) then sum1 + prices[pricesInRange[3]] else sum1
    let priceSum = if (priceProvidingCount >= 5) then sum2 + prices[pricesInRange[4]] else sum2
    if (priceProvidingCount >= 6) then throw("Invalid pricesInRange creation") else

    let newPrice = priceSum/priceProvidingCount

    let wxUsdTuple = finalizeWxUsdOnchain(newPrice)
    let newWxUsdPrice = wxUsdTuple._1
    let wxDebug       = wxUsdTuple._2

    let viresUsdTuple = finalizeViresUsdOnchain(newPrice)
    let newViresUsdPrice = viresUsdTuple._1
    let viresDebug       = viresUsdTuple._2

    let windUsdTuple = finalizeWindUsdOnchain(newPrice)
    let newWindUsdPrice = windUsdTuple._1
    let windDebug       = windUsdTuple._2

    let (shouldBlock, blockingAsset, blockingPrice) = checkPrices(newPrice, newWxUsdPrice, newViresUsdPrice)
    if (shouldBlock) then {
        let reason = "automatic emergency shutdown because of large price variability"
        [BooleanEntry("is_blocked", true),
          StringEntry("is_blocked_caller", toString(this)),
          StringEntry("is_blocked_reason", reason),
          IntegerEntry("black_swarm_price_" + toString(height), blockingPrice),
          StringEntry("black_swan_token", blockingAsset)]
    } else {
        let newPriceIndex = priceIndex + 1
        [ IntegerEntry("price", newPrice),                                  # price - current price
          IntegerEntry("price_" + toString(height), newPrice),              # priceByHeight - if you know height you can find price
          IntegerEntry("price_index_" + toString(newPriceIndex), height),   # heightByIndex - if you know index you can find price's height
          IntegerEntry("price_index", newPriceIndex),                       # index sequence

          # new additional information
          IntegerEntry("indexByHeight_" + toString(height), newPriceIndex), # indexByHeight - if you know height you can find index
          IntegerEntry("priceByIndex_" + toString(newPriceIndex), newPrice),# priceByIndex - if you know index you can find price

          IntegerEntry("deficit_" + toString(height), deficit),
          IntegerEntry("neutrinoSupply_" + toString(height), neutrinoSupply),
          IntegerEntry("deficit_percent_" + toString(height), if (neutrinoSupply != 0) then deficit * 100 / neutrinoSupply else 0)
        ]
        ++ PriceEntry(newPrice, "WAVES", newPriceIndex)
        ++ PriceEntry(newWxUsdPrice, wxIdStr, newPriceIndex)
        ++ PriceEntry(newViresUsdPrice, viresIdStr, newPriceIndex)
        ++ PriceEntry(newWindUsdPrice, windIdStr, newPriceIndex)
        :+ StringEntry("debug_wxUsdCalc", wxDebug)
        :+ StringEntry("debug_viresUsdCalc", viresDebug)
        :+ StringEntry("debug_windUsdCalc", windDebug)
    }
}

@Callable(i)
func validatePrice(averagingPeriodMs: Int, toleranceX6: Int, assetIdStr: String) = {
  # need to swap each of basket tokens (except given) to assetIdStr
  # ensure market prices are within allowed tolerance from average
  ([], true)
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsListStr = makeString([
        "GJdLSaLiv5K7xuejac8mcRcHoyo3dPrESrvktG3a6MAR",
        "EYwZmURd5KKaQRBjsVa6g8DPisFoS6SovRJtFiL5gMHU",
        "DtmAfuDdCrHK8spdAeAYzq6MsZegeD9gnsrpuTRkCbVA",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ], SEP)

    let pubKeyAdminsList = controlContract.getString("%s__multisig")
          .valueOrElse(pubKeyAdminsListStr)
          .split(SEP)

    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}