{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Constants---------------------------
let EULER8     = 271828182      # 10Ë†8
let MULT6      = 1_000_000
let MULTX6     = 1_000_000.toBigInt()
let MULT8      = 1_0000_0000
let MULTX8     = 1_0000_0000.toBigInt()
let MULTX10    = 10_000_000_000.toBigInt()
let MULT12     = 1_000_000_000_000
let MULTX16    = 1_0000_0000_0000_0000.toBigInt()
let MULT18     = 1_000_000_000_000_000_000.toBigInt()
let SEP        = "__"
let LISTSEP = ":"
let DEFAULTSWAPFEEN2W = 5000 # 0.005 * 1000000 or 0.5%
let DEFAULTSWAPFEEW2N = 20000 # 0.02 * 1000000 or 2%
let BRPROTECTED = 100000 # if BR <= 10% then use SURF during swap USDN->WAVES 

# synthetic WAVES assetId
let WAVESID = fromBase58String("WAVES")
let DAYMILLIS = 86_400_000  #24 * 60 * 60 * 1000
let DEFAULTPERIOD = 1440 * 14 # two weeks (default voting pover maturity period)

#-------neutrino keys------
func keyNeutrinoAssetId() = "neutrino_asset_id"
func keyNsbtAssetId() = "bond_asset_id" # nsbt
func keySurfAssetId() = "surf_asset_id"
func keySwapAmountAParam() = "%s%s__config__swapAParam"
func keySwapAmountBParam() = "%s%s__config__swapBParam"
func keyUsdnSwapAmountAParam()  = "%s%s__config__usdnSwapAParam"
func keyUsdnSwapAmountBParam()  = "%s%s__config__usdnSwapBParam"
func keyNsbtLockContract() = "%s__nsbtLockContract" # ignored
func keyMathContract() = "%s__mathContract" # ignored

func basketAssetsKey()                       = "%s%s__common__basketAssets"
func basketDKey()                            = "%s%s__common__basketD"
func basketBKey()                            = "%s%s__common__basketB"
func basketLogbDeltaKey()                    = "%s%s__common__basketLogbDelta"
func basketWeightByAssetKey(assetId: String) = "%s%s%s__common__weightByAsset__" + assetId

#------control keys-------
func keyPrice() = "price"
func keyPriceByAsset(assetId: String) = "%s%s%s__common__priceByAsset__" + assetId

#-------- nsbt staking keys-----------
func keyLockParamStartBlock(userAddress: String) = ["%s%s%s", "paramByUser", userAddress, "start"].makeString(SEP)
func keyHalfLife() = "%s__halfLife"
func keyMinLockAmount() = "%s__minLockAmount"

#-------- surf staking keys-----------
func keyVpPeriodDuration() = ["%s%s", "vp", "periodDuration"].makeString(SEP)

#------- auction keys------
func keyMinWavesForNsbtBuy() = "min_waves_nsbt_buy"
func keyMinNsbtSell() = "min_nsbt_sell"

#------- staking keys and api------
func keyStatsDepositAmtByDay(timestamp: Int) = ["%s%s%d", "stats", "depositAmtByDay", timestamp.toString()].makeString(SEP)

#------- math keys-------
func keySupportedRewardAssets() = "supportedRewardAssets"

func toStartOfDay(timestamp: Int) = {
  (timestamp / DAYMILLIS) * DAYMILLIS
}

#-------------------Base functions----------------------
func getStringOrFail(address: Address, key: String) = address.getString(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getIntOrFail(address: Address, key: String) = address.getInteger(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getBoolOrFail(address: Address, key: String) = address.getBoolean(key).valueOrErrorMessage(makeString(["mandatory ", address.toString(), ".", key, " is not defined"], ""))
func getIntOrElse(address: Address, key: String, defaultVal: Int) = address.getInteger(key).valueOrElse(defaultVal)
func getStrOrElse(address: Address, key: String, defaultVal: String) = address.getString(key).valueOrElse(defaultVal)

func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(amount, MULT8, price)
func convertTokenToUsd(amount: Int, price: Int) = fraction(amount, price, MULT8)

func asAnyList(val: Any) = {
  match val {
    case valAnyList: List[Any] => valAnyList
    case _ => throw("fail to cast into List[Any]")
  }
}

func asInt(val: Any) = {
  match val {
    case valInt: Int => valInt
    case _ => throw("fail to cast into Int")
  }
}

func asString(val: Any) = {
  match val {
    case valStr: String => valStr
    case _ => throw("fail to cast into String")
  }
}

func asTuple2Ints(val: Any) = {
  match val {
    case v: (Int, Int) => v
    case _ => throw("fail to cast into Tuple2 ints")
  }
}

func asSwapParamsSTRUCT(val: Any) = {
  match val {
    case struct: (Int,Int,Int,Int,Int,Int,Int) => struct
    case _ => throw("fail to cast into SwapParamsSTRUCT")
  }
}

func asWithdrawResultSTRUCT(val: Any) = {
  match val {
    case struct: (Int,ByteVector|Unit,Int,Int,Int,Int,Int,Int,String) => struct
    case _ => throw("fail to cast into WithdrawResult")
  }
}

func toTimestamp(start: Int) = {
  if start < 0 then -1 else
  match blockInfoByHeight(start) {
    case block: BlockInfo => block.timestamp
    case _ => -1
  }
}

func toX18(origVal: Int, origScaleMult: Int)    = fraction(origVal.toBigInt(), MULT18, origScaleMult.toBigInt())
func fromX18(val: BigInt, resultScaleMult: Int) = fraction(val, resultScaleMult.toBigInt(), MULT18).toInt()

#indices for calcNeutinoMetricsREADONLY result array
let nMetricIdxPrice = 0
let nMetricIdxUsdnLockedBalance = 1
let nMetricIdxWavesLockedBalance = 2
let nMetricIdxReserve = 3
let nMetricIdxReserveInUsdn = 4
let nMetricIdxUsdnSupply = 5
let nMetricIdxSurplus = 6
let nMetricIdxSurplusPercent = 7
let nMetricIdxBR = 8 # BR with 6 decimals
let nMetricIdxNsbtSupply = 9
let nMetricIdxMaxNsbtSupply = 10
let nMetricIdxSurfSupply = 11
let nMetricUsdnUsdtPeg = 12
let nMetricCurrentPriceAdj = 13
let nMetricBasketInfo = 14
let nMetricWeightedPrice = 15
let nMetricTotalReservesUsd = 16

# data indices from controlConfig
let IdxControlCfgNeutrinoDapp     = 1
let IdxControlCfgAuctionDapp      = 2
let IdxControlCfgRpdDapp          = 3
let IdxControlCfgMathDapp         = 4
let IdxControlCfgLiquidationDapp  = 5
let IdxControlCfgRestDapp         = 6
let IdxControlCfgNodeRegistryDapp = 7
let IdxControlCfgNsbtStakingDapp  = 8
let IdxControlCfgMediatorDapp     = 9
let IdxControlCfgSurfStakingDapp  = 10
let IdxControlCfgGnsbtControllerDapp  = 11

# surfFunctionREADONLY result array indices
let bFuncIdxSurf = 0
let bFuncIdxWaves = 1
let bFuncIdxUsdn = 2
let bFuncIdxReserveStart = 3
let bFuncIdxSupplyStart = 4
let bFuncIdxBRStart = 5
let bFuncIdxReserveEnd = 6
let bFuncIdxSupplyEnd = 7
let bFuncIdxBREnd = 8
let bFuncIdxRest = 9
let bFuncIdxWavesPrice = 10

func keyControlAddress() = "%s%s__config__controlAddress"
func keyControlCfg()     = "%s__controlConfig"

func readControlCfgOrFail(control: Address) = split_4C(control.getStringOrFail(keyControlCfg()), SEP)
func getContractAddressOrFail(controlCfg: List[String], idx: Int) = controlCfg[idx].addressFromString()
  .valueOrErrorMessage("Control cfg doesn't contain address at index " + idx.toString())

# GLOBAL VARIABLES
let controlContract = this.getString(keyControlAddress()).valueOrElse("3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP").addressFromStringValue()
let controlCfg = controlContract.readControlCfgOrFail()

let mathContract = controlCfg.getContractAddressOrFail(IdxControlCfgMathDapp)
let neutrinoContract = controlCfg.getContractAddressOrFail(IdxControlCfgNeutrinoDapp)
let auctionContract = controlCfg.getContractAddressOrFail(IdxControlCfgAuctionDapp)
let liquidationContract = controlCfg.getContractAddressOrFail(IdxControlCfgLiquidationDapp)
let rpdContract = controlCfg.getContractAddressOrFail(IdxControlCfgRpdDapp)
let nsbtStakingContract = controlCfg.getContractAddressOrFail(IdxControlCfgNsbtStakingDapp)
let surfStakingContract = controlCfg.getContractAddressOrFail(IdxControlCfgSurfStakingDapp)
let gnsbtControllerContract = controlCfg.getContractAddressOrFail(IdxControlCfgGnsbtControllerDapp)

let neutrinoAssetIdString = neutrinoContract.getStringOrFail(keyNeutrinoAssetId())
let neutrinoAssetId = fromBase58String(neutrinoAssetIdString)
let nsbtAssetIdStr = neutrinoContract.getStringValue(keyNsbtAssetId())
let nsbtAssetId = nsbtAssetIdStr.fromBase58String()
let surfAssetIdStr = auctionContract.getStringValue(keySurfAssetId())
let surfAssetId = surfAssetIdStr.fromBase58String()

func readUsdnIncomeByDay(stakingAcc: Address, startOfDayTimestamp: Int, xtnPrice: Int) = {
  let amtByDayKEY = keyStatsDepositAmtByDay(startOfDayTimestamp)
  let incomeStr = stakingAcc.getStrOrElse(amtByDayKEY, "%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d__0__0__0__0__0__0__0__0__0__0__0__0__0__0__0__0__0__0")
  let incomeArray = incomeStr.split(SEP)
  let supportedAssets = mathContract.getStrOrElse(keySupportedRewardAssets(), "").split("_")

  func incomeAdder(acc: Int, i: Int) = {
    let assetId = supportedAssets[i]
    let income = incomeArray[i+1].parseIntValue()
    if (assetId == neutrinoAssetIdString) then {
      acc + income
    } else { # other assets have 8 decimals
      let pr6 = controlContract.getInteger(keyPriceByAsset(assetId)).value()
      let assetInUsdAmt = fraction(income, pr6, MULT8)
      acc + fraction(assetInUsdAmt, MULT6, xtnPrice)
    }
  }
  # TODO: refactor it, so incomeStr will contain assetIds itself
  FOLD<10>([0, 1, 2], 0, incomeAdder)
}

func calcUsdnIncomeForPeriod(stakingAcc: Address, days: Int) = {
  let neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsREADONLY",[],[]).asAnyList()

  let currStartOfDay = toStartOfDay(lastBlock.timestamp)
  let startTimestamp = currStartOfDay - DAYMILLIS * (days + 1)
  let endTimestamp = currStartOfDay - DAYMILLIS
  let xtnPrice = neutrinoMetrics[nMetricWeightedPrice].asInt()
  let startUsdnAmtTMP  = stakingAcc.readUsdnIncomeByDay(startTimestamp, xtnPrice)
  let endUsdnAmt    = stakingAcc.readUsdnIncomeByDay(endTimestamp, xtnPrice)
  # there is possibility of holes in stats accumulations, it means that swaps are rarely used and APR is about zero
  let startUsdnAmt  = if (startUsdnAmtTMP == 0) then endUsdnAmt else startUsdnAmtTMP

  endUsdnAmt - startUsdnAmt
}

func calcApr(stakingAcc: Address, periodInDays: Int, incomeForPeriod: Int, stakingAssetPriceToUsdnX6: Int) = {
  let totalStaked = stakingAcc.getIntOrElse("%s%s__stats__activeTotalLocked", 1)
  let totalStakedInUsdn = fraction(totalStaked, stakingAssetPriceToUsdnX6, MULT6)

  if (incomeForPeriod < 0) then 0 else
  fraction(incomeForPeriod * MULT6, 365, totalStakedInUsdn * periodInDays)
}

func swapInfoInternal(userAddressStrOrEmpty: String, amountIn: Int, assetIdStrIn: String, assetIdStrOutOrEmpty: String) = {
  let neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsREADONLY", [], []).asAnyList()
  let price = neutrinoMetrics[nMetricIdxPrice].asInt()

  let swapParamsTuple = neutrinoContract.invoke("swapParamsByUserSYSREADONLY", [userAddressStrOrEmpty, 0], []).asSwapParamsSTRUCT()
  let limitMaxTokenInUsd = swapParamsTuple._1
  let blcks2LmtReset  = swapParamsTuple._3
  let limitMaxUsdn    = swapParamsTuple._7

  let assetId = assetIdStrIn.fromBase58String()

  let basketAssets = neutrinoContract.getString(basketAssetsKey()).valueOrElse("WAVES") # WAVES__wxId__viresId__swopId__eggId__westId
  let swapType = if (basketAssets.contains(assetIdStrIn)) then "outNeutrino"
      else if (assetId == neutrinoAssetId) then "outMulti"
      else throw("Can't swap assetId=" + assetIdStrIn)

  let withdrawTuple = neutrinoContract.invoke("calcWithdrawResultSYSREADONLY", [swapType, amountIn, price, assetIdStrIn, assetIdStrOutOrEmpty], []).asWithdrawResultSTRUCT()

  let outNeutrinoInfo = makeString([
    neutrinoAssetIdString, 
    withdrawTuple._8.toString(), # xtnPrice
    withdrawTuple._1.toString(), # xtnNetAmount
    withdrawTuple._6.toString(), # xtnFeeAmount
    "1000000"                    # xtn share = 1.0
  ], LISTSEP)
  let withdrawBasket  = if (swapType == "outNeutrino") then outNeutrinoInfo else withdrawTuple._9 # assetId:price:netAmount:feeAmount:share_ ...

  ([], makeString_2C(["%d%d%d%s",
    blcks2LmtReset.toString(),     #1
    limitMaxTokenInUsd.toString(), #2
    limitMaxUsdn.toString(),       #3
    withdrawBasket                 #4
  ], SEP))
}

# MATH CANDIDATE
@Callable(i)
func reverseSwapLimitREADONLY(lim: Int, isOutMulti: Boolean) = {
  let BR = mathContract.invoke("calcNeutinoMetricsREADONLY",[],[]).asAnyList()[nMetricIdxBR].asInt()

  # token 2 xtn swap: gNsbt = (limTokenInUSD/a)^1/b
  # xtn 2 multi swap: gNsbt = (limXtn/au/BR)^1/bu
  let gNsbt = if (lim <= 0) then 0 else
  let aParamX8 = mathContract.getIntOrFail(if (isOutMulti) then keyUsdnSwapAmountAParam() else keySwapAmountAParam()).toBigInt()
  let bParamX16 = mathContract.getIntOrFail(if (isOutMulti) then keyUsdnSwapAmountBParam() else keySwapAmountBParam()).toBigInt()
  let limDivAX8 = if (isOutMulti) then fraction(fraction(lim.toBigInt(), MULTX10, aParamX8), MULTX6, BR.toBigInt())
    else fraction(lim.toBigInt(), MULTX10, aParamX8) 

  let revBX16 = fraction(MULTX16, MULTX16, bParamX16)
  pow(limDivAX8, 8, revBX16, 16, 6, CEILING).toInt()

  ([],  gNsbt)
}

@Callable(i)
func gnsbtInfoINTERNAL(userAddressStrOrEmpty: String, additionalNsbtToStakeOrZero: Int, additionalSurfToStakeOrZero: Int) = {
  let userAddressOrThis = if (userAddressStrOrEmpty != "") then userAddressStrOrEmpty.addressFromStringValue() else this
  let currentPrice = controlContract.getIntegerValue(keyPrice())

  let gnsbtFromNsbtDiff = additionalNsbtToStakeOrZero
  # this invocation is just surfToGnsbt() conversion, which is currently div(300)
  let gnsbtFromSurfDiff = surfStakingContract.invoke("gnsbtFromSurfSYSREADONLY", [additionalSurfToStakeOrZero], []).asInt()
  let gNsbtDiff = gnsbtFromNsbtDiff + gnsbtFromSurfDiff

  let swapParamsTuple = neutrinoContract.invoke("swapParamsByUserSYSREADONLY", [userAddressStrOrEmpty, 0], []).asSwapParamsSTRUCT()
  let limitMaxTokenUsd  = swapParamsTuple._1
  let blcks2LmtReset    = swapParamsTuple._3
  let gnsbtAmt          = swapParamsTuple._4
  let gnsbtAmtTotal     = swapParamsTuple._5
  let limitMaxUsdn      = swapParamsTuple._7

  let swapParamsTupleNEW = neutrinoContract.invoke("swapParamsByUserSYSREADONLY", [userAddressStrOrEmpty, gNsbtDiff], []).asSwapParamsSTRUCT()
  let limitMaxTokenUsdNEW = swapParamsTupleNEW._1
  let blcks2LmtResetNEW = swapParamsTupleNEW._3
  let gnsbtAmtNEW       = swapParamsTupleNEW._4
  let gnsbtAmtTotalNEW  = swapParamsTupleNEW._5
  let limitMaxUsdnNEW   = swapParamsTupleNEW._7

  let nsbtBalance           = if (userAddressStrOrEmpty != "") then assetBalance(userAddressOrThis, nsbtAssetId) else 0
  let surfBalance           = if (userAddressStrOrEmpty != "") then assetBalance(userAddressOrThis, surfAssetId) else 0

  let nsbtBalanceDiff = if (additionalNsbtToStakeOrZero >= 0) then additionalNsbtToStakeOrZero else {
    let nsbtUnstakingData     = nsbtStakingContract.invoke("nsbtUnstakingSYSREADONLY", [userAddressStrOrEmpty, -1*additionalNsbtToStakeOrZero], []).asAnyList()
    let nsbtReceiveAmount     = nsbtUnstakingData[2].asInt()
    let result = -nsbtReceiveAmount
    result
  }

  let nsbtBalanceNew        = nsbtBalance - nsbtBalanceDiff
  let surfBalanceNew        = surfBalance - additionalSurfToStakeOrZero

  let gnsbtData = gnsbtControllerContract.invoke("gnsbtInfoSYSREADONLY", [userAddressStrOrEmpty, additionalNsbtToStakeOrZero, additionalSurfToStakeOrZero], []).asAnyList()

  let gnsbtUser             = gnsbtData[0].asInt()
  let gnsbtTotal            = gnsbtData[1].asInt()
  let nsbtData              = gnsbtData[2].asAnyList()
  let surfData              = gnsbtData[3].asAnyList()

  let gnsbtSurfTotalMature  = gnsbtData[6].asInt()
  let gnsbtSurfTotalTeen    = gnsbtData[7].asInt()
  let gnsbtSurfTotalKid     = gnsbtData[8].asInt()
  let gnsbtSurfUserMature   = gnsbtData[9].asInt()
  let gnsbtSurfUserTeen     = gnsbtData[10].asInt()
  let gnsbtSurfUserKid      = gnsbtData[11].asInt()

  let gnsbtAmtFromSurfMax   = gnsbtSurfUserMature + gnsbtSurfUserTeen + gnsbtSurfUserKid

  let gnsbtAmtFromNsbt      = nsbtData[2].asInt()
  let gnsbtAmtFromNsbtNEW   = gnsbtAmtFromNsbt + gnsbtFromNsbtDiff
  let gnsbtAmtFromSurfNEW   = gnsbtAmtFromSurfMax + gnsbtFromSurfDiff

  let gnsbtFromNsbtTotal    = nsbtData[3].asInt()
  let gnsbtFromNsbtTotalNEW = gnsbtFromNsbtTotal + gnsbtFromNsbtDiff
  let gnsbtFromSurfTotalNEW = gnsbtSurfTotalMature + gnsbtSurfTotalTeen + gnsbtSurfTotalKid + gnsbtFromSurfDiff

  # TODO MOVE into gnsbtController
  let votingPower       = gnsbtAmtFromNsbt + gnsbtSurfUserMature
  let votingPowerNew    = gnsbtAmtFromNsbtNEW + gnsbtSurfUserMature
  let votingPowerMax    = gnsbtAmtFromNsbt + gnsbtAmtFromSurfMax
  let votingPowerMaxNew = gnsbtAmtFromNsbtNEW + gnsbtAmtFromSurfMax + gnsbtFromSurfDiff
  let W2 = surfStakingContract.getIntOrElse(keyVpPeriodDuration(), DEFAULTPERIOD)
  let period = height / W2
  let votingPowerEta    = if (gnsbtSurfUserKid != 0) then (period + 2) * W2 else if (gnsbtSurfUserTeen != 0) then (period + 1) * W2 else height
  let votingPowerEtaNew = if (gnsbtFromSurfDiff != 0) then (period + 2) * W2 else votingPowerEta

  ([], [
    0,                     # stub for meta info
    nsbtBalance,           # 1
    surfBalance,           # 2
    nsbtBalanceNew,        # 3
    surfBalanceNew,        # 4

    gnsbtAmtFromNsbt,      # 5
    gnsbtSurfUserMature,   # 6
    gnsbtAmtFromNsbtNEW,   # 7
    gnsbtAmtFromSurfNEW,   # 8

    gnsbtFromNsbtTotal,    # 9
    gnsbtSurfTotalMature,  # 10
    gnsbtFromNsbtTotalNEW, # 11
    gnsbtFromSurfTotalNEW, # 12

    limitMaxUsdn,          # 13
    limitMaxTokenUsd,      # 14
    limitMaxUsdnNEW,       # 15
    limitMaxTokenUsdNEW,   # 16
    blcks2LmtReset,        # 17
    blcks2LmtResetNEW,     # 18

    votingPower,           # 19
    votingPowerNew,        # 20
    votingPowerMax,        # 21
    votingPowerMaxNew,     # 22
    votingPowerEta,        # 23
    votingPowerEtaNew      # 24
  ])
}

@Callable(i)
func gnsbtInfoREADONLY(userAddressStrOrEmpty: String, additionalNsbtToStakeOrZero: Int, additionalSurfToStakeOrZero: Int) = {
  let gnsbtInfoDATA = this.invoke("gnsbtInfoINTERNAL", [userAddressStrOrEmpty, additionalNsbtToStakeOrZero, additionalSurfToStakeOrZero], []).asAnyList()

  ([], makeString([
    "%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d",
    gnsbtInfoDATA[1].asInt().toString(),
    gnsbtInfoDATA[2].asInt().toString(),
    gnsbtInfoDATA[3].asInt().toString(),
    gnsbtInfoDATA[4].asInt().toString(),

    gnsbtInfoDATA[5].asInt().toString(),
    gnsbtInfoDATA[6].asInt().toString(),
    gnsbtInfoDATA[7].asInt().toString(),
    gnsbtInfoDATA[8].asInt().toString(),

    gnsbtInfoDATA[9].asInt().toString(),
    gnsbtInfoDATA[10].asInt().toString(),
    gnsbtInfoDATA[11].asInt().toString(),
    gnsbtInfoDATA[12].asInt().toString(),

    gnsbtInfoDATA[13].asInt().toString(),
    gnsbtInfoDATA[14].asInt().toString(), # limitMaxTokenInUsd
    gnsbtInfoDATA[15].asInt().toString(),
    gnsbtInfoDATA[16].asInt().toString(), # limitMaxTokenInUsdNEW
    gnsbtInfoDATA[17].asInt().toString(),
    gnsbtInfoDATA[18].asInt().toString(),

    gnsbtInfoDATA[19].asInt().toString(),
    gnsbtInfoDATA[20].asInt().toString(),
    gnsbtInfoDATA[21].asInt().toString(),
    gnsbtInfoDATA[22].asInt().toString(),
    gnsbtInfoDATA[23].asInt().toString(),
    gnsbtInfoDATA[24].asInt().toString()
  ], SEP))
}

@Callable(i)
func gnsbtEffectiveREADONLY(userAddressStrOrEmpty: String) = {
  let gnsbtData = gnsbtControllerContract.invoke("gnsbtInfoSYSREADONLY", [userAddressStrOrEmpty, 0, 0], []).asAnyList()
  let nsbtData = gnsbtData[2].asAnyList()
  let userFromNsbt = nsbtData[2].asInt()
  let totalFromNsbt = nsbtData[3].asInt()
  let userMatureFromSurf = gnsbtData[9].asInt()
  let totalMatureFromSurf = gnsbtData[6].asInt()
  ([], makeString([
    "%d%d",
    (totalFromNsbt + totalMatureFromSurf).toString(), # 1 effective total gNsbt
    (userFromNsbt + userMatureFromSurf).toString()    # 2 effective user gNsbt
  ], SEP))
}

@Callable(i)
func rewardInfoREADONLY(userAddressStrOrEmpty: String) = {
  let rewardsData = gnsbtControllerContract.invoke("gnsbtRewardsSYSREADONLY", [userAddressStrOrEmpty], []).asAnyList()
  let usdnRewards = rpdContract.invoke("unclaimedRewardsREADONLY", [userAddressStrOrEmpty], []).asString()
  ([], makeString_2C([
    "%s%s%s",
    rewardsData[0].asString(), #1 nsbt
    rewardsData[1].asString(), #2 surf
    usdnRewards                #3 usdn
  ], SEP))
}

@Callable(i)
func mergeNsbtREADONLY(userAddressMandatory: String, newAmount: Int) = {
  let nsbtData = nsbtStakingContract.invoke("nsbtStakingSYSREADONLY", [userAddressMandatory, newAmount], []).asAnyList()
  let amount0 = nsbtData[0].asInt()
  let startHeight = if (amount0 <= 0) then -1 else nsbtData[2].asInt()
  let startTimestamp = toTimestamp(startHeight)

  let startHeightNew = if newAmount <= 0 then startHeight else if (amount0 <= 0) then height else {
    let halfLife = nsbtStakingContract.getIntOrFail(keyHalfLife())
    mathContract.invoke("mergeStakesREADONLY", [amount0, startHeight, newAmount, height, halfLife], []).asInt()
  }
  let startTimestampNew = toTimestamp(startHeightNew)

  ([], makeString(["%d%d%d%d",
      startHeight.toString(),           # 1
      startTimestamp.toString(),        # 2
      startHeightNew.toString(),        # 3
      startTimestampNew.toString()      # 4
    ], SEP))
}

# pass Usdn assetId string or any basket assetId (use "WAVES" as waves id)
@Callable(i)
func swapLimitCalculatorREADONLY(userAddressStrOpt: String, limitWanted: Int, assetIdStr: String) = {
  let gNsbtCurrent = if (userAddressStrOpt == "") then 0 else
    neutrinoContract.invoke("swapParamsByUserSYSREADONLY", [userAddressStrOpt, 0], []).asSwapParamsSTRUCT()._4.asInt()

  let price = controlContract.getInteger(keyPriceByAsset(assetIdStr)).valueOrErrorMessage("No price for asset " + assetIdStr)
  let isOutMulti = (assetIdStr == neutrinoAssetIdString)
  let limitWantedUsdn = if (isOutMulti) then limitWanted else convertTokenToUsd(limitWanted, price)
  let gNsbtNeeded = this.invoke("reverseSwapLimitREADONLY", [limitWantedUsdn, isOutMulti], []).asInt()
  let gNsbtDelta = gNsbtNeeded - gNsbtCurrent
  ([], makeString([
    "%s%s",
    gNsbtCurrent.toString(), #1 gNsbtCurrent
    gNsbtDelta.toString()    #2 gNsbtDelta to reach given swap limit
  ], SEP))
}

# use "WAVES" as Waves assetId
@Callable(i)
func swapInfoREADONLY(userAddressStrOrEmpty: String, amount: Int, assetIdStr: String) = {
  let neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsREADONLY", [], []).asAnyList()
  let price = neutrinoMetrics[nMetricIdxPrice].asInt()

  let swapParamsTuple = neutrinoContract.invoke("swapParamsByUserSYSREADONLY", [userAddressStrOrEmpty, 0], []).asSwapParamsSTRUCT()
  let limitMaxTokenInUsd = swapParamsTuple._1
  let blcks2LmtReset  = swapParamsTuple._3
  let limitMaxUsdn    = swapParamsTuple._7

  let assetId = assetIdStr.fromBase58String()

  let basketAssets = neutrinoContract.getString(basketAssetsKey()).valueOrElse("WAVES") # WAVES__wxId__viresId__swopId__eggId__westId
  let swapType = if (basketAssets.contains(assetIdStr)) then "outNeutrino"
      else if (assetId == neutrinoAssetId) then "outMulti"
      else throw("Can't swap assetId=" + assetIdStr)

  let withdrawTuple = neutrinoContract.invoke("calcWithdrawResultSYSREADONLY", [swapType, amount, price, assetIdStr, ""], []).asWithdrawResultSTRUCT()
  let outNetAmount    = withdrawTuple._1
  let outSurfAmt      = withdrawTuple._3
  let inAmtToSurfPart = withdrawTuple._4
  let outFeeAmount    = withdrawTuple._6
  let outAmtGross     = withdrawTuple._7
  let withdrawPrice   = withdrawTuple._8

  ([], makeString(["%d%d%d%d%d%d%d%d",
    outNetAmount.toString(),    #1
    outSurfAmt.toString(),      #2
    outFeeAmount.toString(),    #3
    withdrawPrice.toString(),   #4
    blcks2LmtReset.toString(),  #5
    limitMaxTokenInUsd.toString(), #6
    limitMaxUsdn.toString(),    #7
    inAmtToSurfPart.toString()  #8
  ], SEP))
}

@Callable(i)
func swapInfoV2READONLY(userAddressStrOrEmpty: String, amount: Int, assetIdStr: String) = {
  swapInfoInternal(userAddressStrOrEmpty, amount, assetIdStr, "")
}

@Callable(i)
func swapInfoV3READONLY(userAddressStrOrEmpty: String, amountIn: Int, assetIdStrIn: String, assetIdStrOutOrEmpty: String) = {
  swapInfoInternal(userAddressStrOrEmpty, amountIn, assetIdStrIn, assetIdStrOutOrEmpty)
}

@Callable(i)
func basketInfoREADONLY() = {
  let neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsREADONLY", [], []).asAnyList()
  let basketInfo = neutrinoMetrics[nMetricBasketInfo].asString() # assetIdStr:share6:price6:reserve8_ ...
  let basket = split_4C(basketInfo, "_")

  func modify(acc: List[String], item: String) = {
    let parts = item.split(LISTSEP)
    let assetId = parts[0]
    let dlog6 = neutrinoContract.getInteger(basketLogbDeltaKey()).valueOrErrorMessage("log(b, delta) key is undefined")
    let D6 = neutrinoContract.getInteger(basketDKey()).valueOrErrorMessage("D key is undefined")
    let b6 = neutrinoContract.getInteger(basketBKey()).valueOrErrorMessage("b key is undefined")
    let w6 = neutrinoContract.getInteger(basketWeightByAssetKey(assetId)).valueOrErrorMessage("Target weight for asset " + assetId + " is undefined")
    let p6 = dlog6 - w6 + parts[1].parseIntValue()
    let d = D6 - pow(b6, 6, p6, 6, 6, HALFUP)
    acc :+ makeString(parts :+ w6.toString() :+ d.toString(), LISTSEP)
  }
  let b = FOLD<10>(basket, [], modify)

  ([], "%s__" 
  + makeString_2C(b, "_") # assetIdStr:share6:price6:reserve8:targetWeight6:discount6_ ...
  )
}

@Callable(i)
func usdnStakingAprREADONLY(days: Int) = {
  let tmpDays = 1 # TODO temporary hardcoded till statistics accumulation
  let neutrinoMetrics = mathContract.invoke("calcNeutinoMetricsREADONLY",[],[]).asAnyList()
  let currentPrice    = neutrinoMetrics[nMetricIdxPrice].asInt()

  let wavesIncome = 0*MULT8 # TODO hardocoded income - need to read it dynamically
  let incomeForPeriod = fraction(wavesIncome, currentPrice, MULT8)

  let apr = rpdContract.calcApr(tmpDays, incomeForPeriod, MULT6)
  ([], "%d__" + apr.toString())
}

@Callable(i)
func surfStakingAprREADONLY(days: Int) = {
  let tmpDays = 3 # TODO temporary hardcoded till statistics accumulation
  let incomeForPeriod = surfStakingContract.calcUsdnIncomeForPeriod(tmpDays)
  let surfPriceToUsdnX6 = 86400 # 0.086400 TODO temporary hardcoded - need redesign API
  let apr = surfStakingContract.calcApr(tmpDays, incomeForPeriod, surfPriceToUsdnX6)
  ([], "%d__" + apr.toString())
}

@Callable(i)
func surfStakingAprV2READONLY(days: Int, surfUsdnPriceX6: Int) = {
  let tmpDays = 3 # TODO temporary hardcoded till statistics accumulation
  let incomeForPeriod = surfStakingContract.calcUsdnIncomeForPeriod(tmpDays)
  let apr = surfStakingContract.calcApr(tmpDays, incomeForPeriod, surfUsdnPriceX6)
  ([], "%d__" + apr.toString())
}

@Callable(i)
func nsbtStakingAprREADONLY(days: Int) = {
  let tmpDays = 3 # TODO temporary hardcoded till statistics accumulation
  let nsbtPriceToUsdnX6 = 8000000 # 8.00 TODO temporary hardcoded - need redesign API
  let incomeForPeriod = nsbtStakingContract.calcUsdnIncomeForPeriod(tmpDays)
  let apr = nsbtStakingContract.calcApr(tmpDays, incomeForPeriod, nsbtPriceToUsdnX6)
  ([], "%d__" + apr.toString())
}

@Callable(i)
func nsbtStakingAprV2READONLY(days: Int, nsbtUsdnPriceX6: Int) = {
  let tmpDays = 3 # TODO temporary hardcoded till statistics accumulation
  let incomeForPeriod = nsbtStakingContract.calcUsdnIncomeForPeriod(tmpDays)
  let apr = nsbtStakingContract.calcApr(tmpDays, incomeForPeriod, nsbtUsdnPriceX6)
  ([], "%d__" + apr.toString())
}